/**
 * Labelling
 * 19-Nov-2001
 * @author David Gavilan
 */

package hyper.dsp;

import java.io.*;
import java.math.*;
import java.util.Vector;
import org.freehep.util.io.*;


/**
  * Class that performs the labelling of lattices.
  * <P>It contains a lot of static methods to calculate combinatoric stuff.
  * @author David Gavilan
  * @author Joan Serra
  */
public class Labelling {

    public static final int MAX_NORM = 255;

	/** We want to work at bit level*/
    protected BitOutputStream dout;

    private static Vector nzTable = new Vector(16);
    static {
    // dim 0 
    nzTable.add(new long[] { 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L });
    // dim 1
    nzTable.add(new long[] { 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L });
    // dim 2
    nzTable.add(new long[] { 1L, 4L, 8L, 12L, 16L, 20L, 24L, 28L, 32L, 36L, 40L, 44L, 48L, 52L, 56L, 60L, 64L, 68L, 72L, 76L, 80L, 84L, 88L, 92L, 96L, 100L, 104L, 108L, 112L, 116L, 120L, 124L, 128L, 132L, 136L, 140L, 144L, 148L, 152L, 156L, 160L, 164L, 168L, 172L, 176L, 180L, 184L, 188L, 192L, 196L, 200L, 204L, 208L, 212L, 216L, 220L, 224L, 228L, 232L, 236L, 240L, 244L, 248L, 252L, 256L, 260L, 264L, 268L, 272L, 276L, 280L, 284L, 288L, 292L, 296L, 300L, 304L, 308L, 312L, 316L, 320L, 324L, 328L, 332L, 336L, 340L, 344L, 348L, 352L, 356L, 360L, 364L, 368L, 372L, 376L, 380L, 384L, 388L, 392L, 396L, 400L, 404L, 408L, 412L, 416L, 420L, 424L, 428L, 432L, 436L, 440L, 444L, 448L, 452L, 456L, 460L, 464L, 468L, 472L, 476L, 480L, 484L, 488L, 492L, 496L, 500L, 504L, 508L, 512L, 516L, 520L, 524L, 528L, 532L, 536L, 540L, 544L, 548L, 552L, 556L, 560L, 564L, 568L, 572L, 576L, 580L, 584L, 588L, 592L, 596L, 600L, 604L, 608L, 612L, 616L, 620L, 624L, 628L, 632L, 636L, 640L, 644L, 648L, 652L, 656L, 660L, 664L, 668L, 672L, 676L, 680L, 684L, 688L, 692L, 696L, 700L, 704L, 708L, 712L, 716L, 720L, 724L, 728L, 732L, 736L, 740L, 744L, 748L, 752L, 756L, 760L, 764L, 768L, 772L, 776L, 780L, 784L, 788L, 792L, 796L, 800L, 804L, 808L, 812L, 816L, 820L, 824L, 828L, 832L, 836L, 840L, 844L, 848L, 852L, 856L, 860L, 864L, 868L, 872L, 876L, 880L, 884L, 888L, 892L, 896L, 900L, 904L, 908L, 912L, 916L, 920L, 924L, 928L, 932L, 936L, 940L, 944L, 948L, 952L, 956L, 960L, 964L, 968L, 972L, 976L, 980L, 984L, 988L, 992L, 996L, 1000L, 1004L, 1008L, 1012L, 1016L });
    // dim 3
    nzTable.add(new long[] { 1L, 6L, 18L, 38L, 66L, 102L, 146L, 198L, 258L, 326L, 402L, 486L, 578L, 678L, 786L, 902L, 1026L, 1158L, 1298L, 1446L, 1602L, 1766L, 1938L, 2118L, 2306L, 2502L, 2706L, 2918L, 3138L, 3366L, 3602L, 3846L, 4098L, 4358L, 4626L, 4902L, 5186L, 5478L, 5778L, 6086L, 6402L, 6726L, 7058L, 7398L, 7746L, 8102L, 8466L, 8838L, 9218L, 9606L, 10002L, 10406L, 10818L, 11238L, 11666L, 12102L, 12546L, 12998L, 13458L, 13926L, 14402L, 14886L, 15378L, 15878L, 16386L, 16902L, 17426L, 17958L, 18498L, 19046L, 19602L, 20166L, 20738L, 21318L, 21906L, 22502L, 23106L, 23718L, 24338L, 24966L, 25602L, 26246L, 26898L, 27558L, 28226L, 28902L, 29586L, 30278L, 30978L, 31686L, 32402L, 33126L, 33858L, 34598L, 35346L, 36102L, 36866L, 37638L, 38418L, 39206L, 40002L, 40806L, 41618L, 42438L, 43266L, 44102L, 44946L, 45798L, 46658L, 47526L, 48402L, 49286L, 50178L, 51078L, 51986L, 52902L, 53826L, 54758L, 55698L, 56646L, 57602L, 58566L, 59538L, 60518L, 61506L, 62502L, 63506L, 64518L, 65538L, 66566L, 67602L, 68646L, 69698L, 70758L, 71826L, 72902L, 73986L, 75078L, 76178L, 77286L, 78402L, 79526L, 80658L, 81798L, 82946L, 84102L, 85266L, 86438L, 87618L, 88806L, 90002L, 91206L, 92418L, 93638L, 94866L, 96102L, 97346L, 98598L, 99858L, 101126L, 102402L, 103686L, 104978L, 106278L, 107586L, 108902L, 110226L, 111558L, 112898L, 114246L, 115602L, 116966L, 118338L, 119718L, 121106L, 122502L, 123906L, 125318L, 126738L, 128166L, 129602L, 131046L, 132498L, 133958L, 135426L, 136902L, 138386L, 139878L, 141378L, 142886L, 144402L, 145926L, 147458L, 148998L, 150546L, 152102L, 153666L, 155238L, 156818L, 158406L, 160002L, 161606L, 163218L, 164838L, 166466L, 168102L, 169746L, 171398L, 173058L, 174726L, 176402L, 178086L, 179778L, 181478L, 183186L, 184902L, 186626L, 188358L, 190098L, 191846L, 193602L, 195366L, 197138L, 198918L, 200706L, 202502L, 204306L, 206118L, 207938L, 209766L, 211602L, 213446L, 215298L, 217158L, 219026L, 220902L, 222786L, 224678L, 226578L, 228486L, 230402L, 232326L, 234258L, 236198L, 238146L, 240102L, 242066L, 244038L, 246018L, 248006L, 250002L, 252006L, 254018L, 256038L, 258066L });
    // dim 4
    nzTable.add(new long[] { 1L, 8L, 32L, 88L, 192L, 360L, 608L, 952L, 1408L, 1992L, 2720L, 3608L, 4672L, 5928L, 7392L, 9080L, 11008L, 13192L, 15648L, 18392L, 21440L, 24808L, 28512L, 32568L, 36992L, 41800L, 47008L, 52632L, 58688L, 65192L, 72160L, 79608L, 87552L, 96008L, 104992L, 114520L, 124608L, 135272L, 146528L, 158392L, 170880L, 184008L, 197792L, 212248L, 227392L, 243240L, 259808L, 277112L, 295168L, 313992L, 333600L, 354008L, 375232L, 397288L, 420192L, 443960L, 468608L, 494152L, 520608L, 547992L, 576320L, 605608L, 635872L, 667128L, 699392L, 732680L, 767008L, 802392L, 838848L, 876392L, 915040L, 954808L, 995712L, 1037768L, 1080992L, 1125400L, 1171008L, 1217832L, 1265888L, 1315192L, 1365760L, 1417608L, 1470752L, 1525208L, 1580992L, 1638120L, 1696608L, 1756472L, 1817728L, 1880392L, 1944480L, 2010008L, 2076992L, 2145448L, 2215392L, 2286840L, 2359808L, 2434312L, 2510368L, 2587992L, 2667200L, 2748008L, 2830432L, 2914488L, 3000192L, 3087560L, 3176608L, 3267352L, 3359808L, 3453992L, 3549920L, 3647608L, 3747072L, 3848328L, 3951392L, 4056280L, 4163008L, 4271592L, 4382048L, 4494392L, 4608640L, 4724808L, 4842912L, 4962968L, 5084992L, 5209000L, 5335008L, 5463032L, 5593088L, 5725192L, 5859360L, 5995608L, 6133952L, 6274408L, 6416992L, 6561720L, 6708608L, 6857672L, 7008928L, 7162392L, 7318080L, 7476008L, 7636192L, 7798648L, 7963392L, 8130440L, 8299808L, 8471512L, 8645568L, 8821992L, 9000800L, 9182008L, 9365632L, 9551688L, 9740192L, 9931160L, 10124608L, 10320552L, 10519008L, 10719992L, 10923520L, 11129608L, 11338272L, 11549528L, 11763392L, 11979880L, 12199008L, 12420792L, 12645248L, 12872392L, 13102240L, 13334808L, 13570112L, 13808168L, 14048992L, 14292600L, 14539008L, 14788232L, 15040288L, 15295192L, 15552960L, 15813608L, 16077152L, 16343608L, 16612992L, 16885320L, 17160608L, 17438872L, 17720128L, 18004392L, 18291680L, 18582008L, 18875392L, 19171848L, 19471392L, 19774040L, 20079808L, 20388712L, 20700768L, 21015992L, 21334400L, 21656008L, 21980832L, 22308888L, 22640192L, 22974760L, 23312608L, 23653752L, 23998208L, 24345992L, 24697120L, 25051608L, 25409472L, 25770728L, 26135392L, 26503480L, 26875008L, 27249992L, 27628448L, 28010392L, 28395840L, 28784808L, 29177312L, 29573368L, 29972992L, 30376200L, 30783008L, 31193432L, 31607488L, 32025192L, 32446560L, 32871608L, 33300352L, 33732808L, 34168992L, 34608920L, 35052608L, 35500072L, 35951328L, 36406392L, 36865280L, 37328008L, 37794592L, 38265048L, 38739392L, 39217640L, 39699808L, 40185912L, 40675968L, 41169992L, 41668000L, 42170008L, 42676032L, 43186088L, 43700192L });
    // dim 5
    nzTable.add(new long[] { 1L, 10L, 50L, 170L, 450L, 1002L, 1970L, 3530L, 5890L, 9290L, 14002L, 20330L, 28610L, 39210L, 52530L, 69002L, 89090L, 113290L, 142130L, 176170L, 216002L, 262250L, 315570L, 376650L, 446210L, 525002L, 613810L, 713450L, 824770L, 948650L, 1086002L, 1237770L, 1404930L, 1588490L, 1789490L, 2009002L, 2248130L, 2508010L, 2789810L, 3094730L, 3424002L, 3778890L, 4160690L, 4570730L, 5010370L, 5481002L, 5984050L, 6520970L, 7093250L, 7702410L, 8350002L, 9037610L, 9766850L, 10539370L, 11356850L, 12221002L, 13133570L, 14096330L, 15111090L, 16179690L, 17304002L, 18485930L, 19727410L, 21030410L, 22396930L, 23829002L, 25328690L, 26898090L, 28539330L, 30254570L, 32046002L, 33915850L, 35866370L, 37899850L, 40018610L, 42225002L, 44521410L, 46910250L, 49393970L, 51975050L, 54656002L, 57439370L, 60327730L, 63323690L, 66429890L, 69649002L, 72983730L, 76436810L, 80011010L, 83709130L, 87534002L, 91488490L, 95575490L, 99797930L, 104158770L, 108661002L, 113307650L, 118101770L, 123046450L, 128144810L, 133400002L, 138815210L, 144393650L, 150138570L, 156053250L, 162141002L, 168405170L, 174849130L, 181476290L, 188290090L, 195294002L, 202491530L, 209886210L, 217481610L, 225281330L, 233289002L, 241508290L, 249942890L, 258596530L, 267472970L, 276576002L, 285909450L, 295477170L, 305283050L, 315331010L, 325625002L, 336169010L, 346967050L, 358023170L, 369341450L, 380926002L, 392780970L, 404910530L, 417318890L, 430010290L, 442989002L, 456259330L, 469825610L, 483692210L, 497863530L, 512344002L, 527138090L, 542250290L, 557685130L, 573447170L, 589541002L, 605971250L, 622742570L, 639859650L, 657327210L, 675150002L, 693332810L, 711880450L, 730797770L, 750089650L, 769761002L, 789816770L, 810261930L, 831101490L, 852340490L, 873984002L, 896037130L, 918505010L, 941392810L, 964705730L, 988449002L, 1012627890L, 1037247690L, 1062313730L, 1087831370L, 1113806002L, 1140243050L, 1167147970L, 1194526250L, 1222383410L, 1250725002L, 1279556610L, 1308883850L, 1338712370L, 1369047850L, 1399896002L, 1431262570L, 1463153330L, 1495574090L, 1528530690L, 1562029002L, 1596074930L, 1630674410L, 1665833410L, 1701557930L, 1737854002L, 1774727690L, 1812185090L, 1850232330L, 1888875570L, 1928121002L, 1967974850L, 2008443370L, 2049532850L, 2091249610L, 2133600002L, 2176590410L, 2220227250L, 2264516970L, 2309466050L, 2355081002L, 2401368370L, 2448334730L, 2495986690L, 2544330890L, 2593374002L, 2643122730L, 2693583810L, 2744764010L, 2796670130L, 2849309002L, 2902687490L, 2956812490L, 3011690930L, 3067329770L, 3123736002L, 3180916650L, 3238878770L, 3297629450L, 3357175810L, 3417525002L, 3478684210L, 3540660650L, 3603461570L, 3667094250L, 3731566002L, 3796884170L, 3863056130L, 3930089290L, 3997991090L, 4066769002L, 4136430530L, 4206983210L, 4278434610L, 4350792330L, 4424064002L, 4498257290L, 4573379890L, 4649439530L, 4726443970L, 4804401002L, 4883318450L, 4963204170L, 5044066050L, 5125912010L, 5208750002L, 5292588010L, 5377434050L, 5463296170L, 5550182450L });
    // dim 6
    nzTable.add(new long[] { 1L, 12L, 72L, 292L, 912L, 2364L, 5336L, 10836L, 20256L, 35436L, 58728L, 93060L, 142000L, 209820L, 301560L, 423092L, 581184L, 783564L, 1038984L, 1357284L, 1749456L, 2227708L, 2805528L, 3497748L, 4320608L, 5291820L, 6430632L, 7757892L, 9296112L, 11069532L, 13104184L, 15427956L, 18070656L, 21064076L, 24442056L, 28240548L, 32497680L, 37253820L, 42551640L, 48436180L, 54954912L, 62157804L, 70097384L, 78828804L, 88409904L, 98901276L, 110366328L, 122871348L, 136485568L, 151281228L, 167333640L, 184721252L, 203525712L, 223831932L, 245728152L, 269306004L, 294660576L, 321890476L, 351097896L, 382388676L, 415872368L, 451662300L, 489875640L, 530633460L, 574060800L, 620286732L, 669444424L, 721671204L, 777108624L, 835902524L, 898203096L, 964164948L, 1033947168L, 1107713388L, 1185631848L, 1267875460L, 1354621872L, 1446053532L, 1542357752L, 1643726772L, 1750357824L, 1862453196L, 1980220296L, 2103871716L, 2233625296L, 2369704188L, 2512336920L, 2661757460L, 2818205280L, 2981925420L, 3153168552L, 3332191044L, 3519255024L, 3714628444L, 3918585144L, 4131404916L, 4353373568L, 4584782988L, 4825931208L, 5077122468L, 5338667280L, 5610882492L, 5894091352L, 6188623572L, 6494815392L, 6813009644L, 7143555816L, 7486810116L, 7843135536L, 8212901916L, 8596486008L, 8994271540L, 9406649280L, 9834017100L, 10276780040L, 10735350372L, 11210147664L, 11701598844L, 12210138264L, 12736207764L, 13280256736L, 13842742188L, 14424128808L, 15024889028L, 15645503088L, 16286459100L, 16948253112L, 17631389172L, 18336379392L, 19063744012L, 19814011464L, 20587718436L, 21385409936L, 22207639356L, 23054968536L, 23927967828L, 24827216160L, 25753301100L, 26706818920L, 27688374660L, 28698582192L, 29738064284L, 30807452664L, 31907388084L, 33038520384L, 34201508556L, 35397020808L, 36625734628L, 37888336848L, 39185523708L, 40518000920L, 41886483732L, 43291696992L, 44734375212L, 46215262632L, 47735113284L, 49294691056L, 50894769756L, 52536133176L, 54219575156L, 55945899648L, 57715920780L, 59530462920L, 61390360740L, 63296459280L, 65249614012L, 67250690904L, 69300566484L, 71400127904L, 73550273004L, 75751910376L, 78005959428L, 80313350448L, 82675024668L, 85091934328L, 87565042740L, 90095324352L, 92683764812L, 95331361032L, 98039121252L, 100808065104L, 103639223676L, 106533639576L, 109492366996L, 112516471776L, 115607031468L, 118765135400L, 121991884740L, 125288392560L, 128655783900L, 132095195832L, 135607777524L, 139194690304L, 142857107724L, 146596215624L, 150413212196L, 154309308048L, 158285726268L, 162343702488L, 166484484948L, 170709334560L, 175019524972L, 179416342632L, 183901086852L, 188475069872L, 193139616924L, 197896066296L, 202745769396L, 207690090816L, 212730408396L, 217868113288L, 223104610020L, 228441316560L, 233879664380L, 239421098520L, 245067077652L, 250819074144L, 256678574124L, 262647077544L, 268726098244L, 274917164016L, 281221816668L, 287641612088L, 294178120308L, 300832925568L, 307607626380L, 314503835592L, 321523180452L, 328667302672L, 335937858492L, 343336518744L, 350864968916L, 358524909216L, 366318054636L, 374246135016L, 382310895108L, 390514094640L, 398857508380L, 407342926200L, 415972153140L, 424747009472L, 433669330764L, 442740967944L, 451963787364L, 461339670864L, 470870515836L, 480558235288L, 490404757908L, 500412028128L, 510582006188L, 520916668200L, 531418006212L, 542088028272L, 552928758492L, 563942237112L });
    // dim 7
    nzTable.add(new long[]{ 1L, 14L, 98L, 462L, 1666L, 4942L, 12642L, 28814L, 59906L, 115598L, 209762L, 361550L, 596610L, 948430L, 1459810L, 2184462L, 3188738L, 4553486L, 6376034L, 8772302L, 11879042L, 15856206L, 20889442L, 27192718L, 35011074L, 44623502L, 56345954L, 70534478L, 87588482L, 107954126L, 132127842L, 160659982L, 194158594L, 233293326L, 278799458L, 331482062L, 392220290L, 461971790L, 541777250L, 632765070L, 736156162L, 853268878L, 985524066L, 1134450254L, 1301688962L, 1489000142L, 1698267746L, 1931505422L, 2190862338L, 2478629134L, 2797244002L, 3149298894L, 3537545858L, 3964903502L, 4434463586L, 4949497742L, 5513464322L, 6130015374L, 6803003746L, 7536490318L, 8334751362L, 9202286030L, 10143823970L, 11164333070L, 12269027330L, 13463374862L, 14753106018L, 16144221646L, 17643001474L, 19256012622L, 20990118242L, 22852486286L, 24850598402L, 26992258958L, 29285604194L, 31739111502L, 34361608834L, 37162284238L, 40150695522L, 43336780046L, 46730864642L, 50343675662L, 54186349154L, 58270441166L, 62607938178L, 67211267662L, 72093308770L, 77267403150L, 82747365890L, 88547496590L, 94682590562L, 101167950158L, 108019396226L, 115253279694L, 122886493282L, 130936483342L, 139421261826L, 148359418382L, 157770132578L, 167673186254L, 178088976002L, 189038525774L, 200543499618L, 212626214542L, 225309653506L, 238617478542L, 252574044002L, 267204409934L, 282534355586L, 298590393038L, 315399780962L, 332990538510L, 351391459330L, 370632125710L, 390742922850L, 411755053262L, 433700551298L, 456612297806L, 480524034914L, 505470380942L, 531486845442L, 558609844366L, 586876715362L, 616325733198L, 646996125314L, 678928087502L, 712162799714L, 746742441998L, 782710210562L, 820110333966L, 858988089442L, 899389819342L, 941362947714L, 984955997006L, 1030218604898L, 1077201541262L, 1125956725250L, 1176537242510L, 1228997362530L, 1283392556110L, 1339779512962L, 1398216159438L, 1458761676386L, 1521476517134L, 1586422425602L, 1653662454542L, 1723260983906L, 1795283739342L, 1869797810818L, 1946871671374L, 2026575196002L, 2108979680654L, 2194157861378L, 2282183933582L, 2373133571426L, 2467083947342L, 2564113751682L, 2664303212494L, 2767734115426L, 2874489823758L, 2984655298562L, 3098317118990L, 3215563502690L, 3336484326350L, 3461171146370L, 3589717219662L, 3722217524578L, 3858768781966L, 3999469476354L, 4144419877262L, 4293722060642L, 4447479930446L, 4605799240322L, 4768787615438L, 4936554574434L, 5109211551502L, 5286871918594L, 5469651007758L, 5657666133602L, 5851036615886L, 6049883802242L, 6254331091022L, 6464503954274L, 6680529960846L, 6902538799618L, 7130662302862L, 7365034469730L, 7605791489870L, 7853071767170L, 8107015943630L, 8367766923362L, 8635469896718L, 8910272364546L, 9192324162574L, 9481777485922L, 9778786913742L, 10083509433986L, 10396104468302L, 10716733897058L, 11045562084494L, 11382755904002L, 11728484763534L, 12082920631138L, 12446238060622L, 12818614217346L, 13200228904142L, 13591264587362L, 13991906423054L, 14402342283266L, 14822762782478L, 15253361304162L, 15694334027470L, 16145879954050L, 16608200934990L, 17081501697890L, 17565989874062L, 18061876025858L, 18569373674126L, 19088699325794L, 19620072501582L, 20163715763842L, 20719854744526L, 21288718173282L, 21870537905678L, 22465548951554L, 23073989503502L, 23696100965474L, 24332127981518L, 24982318464642L, 25646923625806L, 26326198003042L, 27020399490702L, 27729789368834L, 28454632332686L, 29195196522338L, 29951753552462L, 30724578542210L, 31513950145230L, 32320150579810L, 33143465659150L, 33984184821762L, 34842601161998L, 35719011460706L, 36613716216014L, 37527019674242L, 38459229860942L, 39410658612066L, 40381621605262L, 41372438391298L, 42383432425614L, 43414931100002L, 44467265774414L, 45540771808898L, 46635788595662L, 47752659591266L });
    nzTable.add(new long[] { 1L, 16L, 128L, 688L, 2816L, 9424L, 27008L, 68464L, 157184L, 332688L, 658048L, 1229360L, 2187520L, 3732560L, 6140800L, 9785072L, 15158272L, 22900496L, 33830016L, 48978352L, 69629696L, 97364944L, 134110592L, 182192752L, 244396544L, 324031120L, 425000576L, 551881008L, 710003968L, 905546576L, 1145628544L, 1438416368L, 1793234944L, 2220686864L, 2732779648L, 3343061168L, 4066763520L, 4920955600L, 5924704640L, 7099246960L, 8468168192L, 10057593232L, 11896386176L, 14016360496L, 16452499712L, 19243188816L, 22430456704L, 26060229872L, 30182597632L, 34852089104L, 40127962240L, 46074505136L, 52761349888L, 60263799248L, 68663166336L, 78047127664L, 88510089728L, 100153569424L, 113086588544L, 127426082608L, 143297324288L, 160834361680L, 180180471680L, 201488628720L, 224921989120L, 250654391312L, 278870872192L, 309768199856L, 343555422976L, 380454437072L, 420700567936L, 464543172464L, 512246257152L, 564089114512L, 620366977664L, 681391693360L, 747492413696L, 819016306768L, 896329286528L, 979816762096L, 1069884406784L, 1166958947088L, 1271488971904L, 1383945762224L, 1504824141568L, 1634643347408L, 1773947923840L, 1923308635760L, 2083323404800L, 2254618267280L, 2437848354432L, 2633698895152L, 2842886241536L, 3066158917456L, 3304298690432L, 3558121667056L, 3828479412224L, 4116260092432L, 4422389643392L, 4747832962224L, 5093595124480L, 5460722626256L, 5850304651648L, 6263474365808L, 6701410233856L, 7165337365904L, 7656528888448L, 8176307342384L, 8726046107904L, 9307170856528L, 9921161030528L, 10569551350000L, 11253933347840L, 11975956932880L, 12737331981440L, 13539829957552L, 14385285562112L, 15275598411216L, 16212734743936L, 17198729159792L, 18235686386176L, 19325783075984L, 20471269635712L, 21674472084272L, 22937793942784L, 24263718155600L, 25654809042816L, 27113714284528L, 28643166937088L, 30245987481616L, 31925085905024L, 33683463813808L, 35524216580864L, 37450535525584L, 39465710127488L, 41573130273648L, 43776288540160L, 46078782507920L, 48484317112960L, 50996707031600L, 53619879100672L, 56357874773072L, 59214852608896L, 62195090802416L, 65302989745152L, 68543074625296L, 71919998063744L, 75438542786992L, 79103624337152L, 82920293819344L, 86893740686720L, 91029295563376L, 95332433105408L, 99808774900368L, 104464092405376L, 109304309924144L, 114335507623168L, 119563924587344L, 124995961915264L, 130638185854448L, 136497330976768L, 142580303394320L, 148894184016000L, 155446231845040L, 162243887317760L, 169294775683792L, 176606710428032L, 184187696734576L, 192045934992896L, 200189824346512L, 208627966284416L, 217369168275504L, 226422447446272L, 235797034302032L, 245502376491904L, 255548142617840L, 265944226087936L, 276700749014288L, 287828066155648L, 299336768905136L, 311237689323264L, 323541904216528L, 336260739261824L, 349405773176944L, 362988841937408L, 377022043039888L, 391517739812480L, 406488565772080L, 421947429029120L, 437907516739920L, 454382299606912L, 471385536426992L, 488931278688256L, 507033875215376L, 525707976863872L, 544968541263536L, 564830837611264L, 585310451513552L, 606423289878912L, 628185585860464L, 650613903848960L, 673725144516496L, 697536549911168L, 722065708602928L, 747330560880896L, 773349404002384L, 800140897493888L, 827724068504304L, 856118317210624L, 885343422276368L, 915419546363008L, 946367241694640L, 978207455676160L, 1010961536565200L, 1044651239198080L, 1079298730770032L, 1114926596669952L, 1151557846369936L, 1189215919369856L, 1227924691197232L, 1267708479462656L, 1308592049971024L, 1350600622888832L, 1393759878967792L, 1438095965825024L, 1483635504280080L, 1530405594749056L, 1578433823696048L, 1627748270142208L, 1678377512232656L, 1730350633861504L, 1783697231355248L, 1838447420214784L, 1894631841916304L, 1952281670771328L, 2011428620846128L, 2072104952940800L, 2134343481628240L, 2198177582353280L, 2263641198592240L, 2330768849073152L, 2399595635056912L, 2470157247679616L, 2542489975356336L, 2616630711246592L, 2692616960781776L, 2770486849254784L, 2850279129472112L, 2932033189468672L, 3015789060285584L, 3101587423811200L, 3189469620685616L, 3279477658268928L, 3371654218673488L, 3466042666860416L });
    // dim 9
    nzTable.add(new long[]{ 1L, 18L, 162L, 978L, 4482L, 16722L, 53154L, 148626L, 374274L, 864146L, 1854882L, 3742290L, 7159170L, 13079250L, 22952610L, 38878482L, 63821826L, 101880594L, 158611106L, 241419474L, 360027522L, 527022162L, 758497698L, 1074801042L, 1501390338L, 2069818002L, 2818849698L, 3795731282L, 5057616258L, 6673166802L, 8724341922L, 11308386834L, 14540038146L, 18553959954L, 23507426466L, 29583267282L, 36993091970L, 45980811090L, 56826471330L, 69850422930L, 85417838082L, 103943599506L, 125897578914L, 151810325586L, 182279185794L, 217974874322L, 259648519842L, 308139206418L, 364382033922L, 429416720658L, 504396772002L, 590599239378L, 689435094402L, 802460243538L, 931387209122L, 1078097503122L, 1244654720514L, 1433318379666L, 1646558537634L, 1887071208786L, 2157794615682L, 2461926301650L, 2802941135010L, 3184610235410L, 3611020853250L, 4086597233682L, 4616122497186L, 5204761569234L, 5858085192066L, 6582095052114L, 7383250057122L, 8268493797522L, 9245283227138L, 10321618598802L, 11506074690978L, 12807833362002L, 14236717469058L, 15803226189522L, 17518571782818L, 19394717831442L, 21444419000322L, 23681262354194L, 26119710273186L, 28775145007314L, 31663914911106L, 34803382400082L, 38211973671330L, 41909230230930L, 45915862271490L, 50253803943570L, 54946270565282L, 60017817814866L, 65494402951554L, 71403448110546L, 77773905718434L, 84636326075922L, 92022927155202L, 99967666659858L, 108506316395682L, 117676539001298L, 127517967088002L, 138072284838738L, 149383312116642L, 161497091134098L, 174461975733762L, 188328723333522L, 203150589587874L, 218983425818706L, 235885779268994L, 253918996233426L, 273147328120482L, 293638040501010L, 315461525198850L, 338691415479570L, 363404704393890L, 389681866332882L, 417606981852546L, 447267865825874L, 478756198981026L, 512167662884754L, 547602078430722L, 585163547892882L, 624960600604578L, 667106342324562L, 711718608351618L, 758920120450002L, 808838647648418L, 861607170975762L, 917364052197378L, 976253206616082L, 1038424280002722L, 1104032829721554L, 1173240510116226L, 1246215262222674L, 1323131507875746L, 1404170348276882L, 1489519767090690L, 1579374838138770L, 1673937937759650L, 1773418961904210L, 1878035548036482L, 1988013301910226L, 2103586029292194L, 2224995972703506L, 2352494053251074L, 2486340117621522L, 2626803190310562L, 2774161731161298L, 2928703898285442L, 3090727816441938L, 3260541850948002L, 3438464887198098L, 3624826615866882L, 3819967823872658L, 4024240691178402L, 4238009093507922L, 4461648911055234L, 4695548343265746L, 4940108229768354L, 5195742377538066L, 5462877894369282L, 5741955528740370L, 6033430016150690L, 6337770432011730L, 6655460551174530L, 6986999214176082L, 7332900700287906L, 7693695107450514L, 8069928739177986L, 8462164498517394L, 8870982289148322L, 9296979423708242L, 9740771039430018L, 10202990521178322L, 10684289931972258L, 11185340451082002L, 11706832819787778L, 12249477794890002L, 12814006610059938L, 13401171445120722L, 14011745903349122L, 14646525496888914L, 15306328140367266L, 15991994652806034L, 16704389267920386L, 17444400152897682L, 18212939935750050L, 19010946241334610L, 19839382236135810L, 20699237181904850L, 21591526998251682L, 22517294834285586L, 23477611649400834L, 24473576803304466L, 25506318655383714L, 26576995173511122L, 27686794552385922L, 28836935841510738L, 30028669582903202L, 31263278458642578L, 32542077948352002L, 33866416996717458L, 35237678691145122L, 36657280949659218L, 38126677219143042L, 39647357184026322L, 41220847485522594L, 42848712451520786L, 44532554837235714L, 46274016576722706L, 48074779545362082L, 49936566333419730L, 51861141030790530L, 53850310023031890L, 55905922798795170L, 58029872768763282L, 60224098096203266L, 62490582539243154L, 64831356304982946L, 67248496915550034L, 69744130086209922L, 72320430615643602L, 74979623288503458L, 77723983790360082L, 80555839635152898L, 83477571105258002L, 86491612204287138L, 89600451622732242L, 92806633716570498L, 96112759498945362L, 99521487645039522L, 103035535510256274L, 106657680161826306L, 110390759423957394L, 114237672936645026L, 118201383228262482L, 122284916802049410L, 126491365236618450L, 130823886300599970L, 135285705081545490L, 139880115129210882L, 144610479613340946L, 149480232496077474L, 154492879719113426L, 159652000405716354L, 164961248077744722L, 170424351887781282L, 176045117866508178L, 181827430185448962L, 187775252435203218L, 193892628919300002L, 200183685963796818L, 206652633242751362L, 213303765119693778L, 220141462005227682L });
    // dim 10
    nzTable.add(new long[]{ 1L, 20L, 200L, 1340L, 6800L, 28004L, 97880L, 299660L, 822560L, 2060980L, 4780008L, 10377180L, 21278640L, 41517060L, 77548920L, 139380012L, 242080320L, 407782740L, 668274440L, 1068305020L, 1669752016L, 2556801700L, 3842321560L, 5675620300L, 8251811680L, 11823020020L, 16711687720L, 23326268700L, 32179616240L, 43910399300L, 59307908024L, 79340636780L, 105189061760L, 138283059860L, 180344446280L, 233435140028L, 300011499280L, 382985402340L, 485792684760L, 612469579020L, 767737840032L, 957099277620L, 1186940456040L, 1464648360540L, 1798737871920L, 2198991932036L, 2676615326200L, 3244403052460L, 3916924292800L, 4710723047380L, 5644536540040L, 6739532551420L, 8019566885200L, 9511462223140L, 11245309675800L, 13254794388044L, 15577546611680L, 18255519711860L, 21335396629160L, 24869026375580L, 28913892200048L, 33533613117380L, 38798480554040L, 44786031924460L, 51581663013120L, 59279281100052L, 67982000830920L, 77802884897340L, 88865731658640L, 101305911902820L, 115271257012056L, 130923000866700L, 148436777891360L, 168003679717300L, 189831373007080L, 214145281060060L, 241189831891120L, 271229775549700L, 304551573522040L, 341464863136300L, 382303999968064L, 427429681322580L, 477230653949960L, 532125509230460L, 592564569148880L, 659031866460068L, 732047222531480L, 812168426433740L, 899993518936160L, 996163185151220L, 1101363259660072L, 1216327348040220L, 1341839568806640L, 1478737419868740L, 1627914773697720L, 1790325005492076L, 1966984258723200L, 2158974852538260L, 2367448835593800L, 2593631690990780L, 2838826197080080L, 3104416449006820L, 3391872045962200L, 3702752449212940L, 4038711516080800L, 4401502215148084L, 4792981528069480L, 5215115543476060L, 5669984748563760L, 6159789524066180L, 6686855848420088L, 7253641217041580L, 7862740782741440L, 8516893723419860L, 9218989843293320L, 9972076414020092L, 10779365262205520L, 11644240109883940L, 12570264174690840L, 13561188036556620L, 14620957777872096L, 15753723404195700L, 16963847552693160L, 18255914495622300L, 19634739446298480L, 21105378175100100L, 22673136943198520L, 24343582761822700L, 26122553984995840L, 28016171243809300L, 30030848730428104L, 32173305840152380L, 34450579179990160L, 36870034952329060L, 39439381722427480L, 42166683578580108L, 45060373693947680L, 48129268299177140L, 51382581075075560L, 54829937974739420L, 58481392484680112L, 62347441334626820L, 66439040665829240L, 70767622667824940L, 75345112693779520L, 80183946864652116L, 85297090172584200L, 90698055094056060L, 96400920723502800L, 102420352438230180L, 108771622105620120L, 115470628843766220L, 122533920346831200L, 129978714786570740L, 137822923301621800L, 146085173086308124L, 154784831090871280L, 163942028345192260L, 173577684918226360L, 183713535525532780L, 194372155797440128L, 205576989220549780L, 217352374765440840L, 229723575213603260L, 242716806196789520L, 256359265962140132L, 270679165876604120L, 285705761684342540L, 301469385530971040L, 318001478768666420L, 335334625556332136L, 353502587269188700L, 372540337732326960L, 392484099292935300L, 413371379746085880L, 435241010129140140L, 458133183400009920L, 482089494014687700L, 507152978419637640L, 533368156474818300L, 560781073823288144L, 589439345223526180L, 619392198860782360L, 650690521653955660L, 683386905574682080L, 717535694995500148L, 753193035084147880L, 790416921261232540L, 829267249738702960L, 869805869156743620L, 912096633336900152L, 956205455169437420L, 1002200361653123840L, 1050151550105829140L, 1100131445564517320L, 1152214759393412156L, 1206478549119309200L, 1263002279513205860L, 1321867884937619800L, 1383159832979165580L, 1446965189386160160L, 1513373684331229620L, 1582477780019092200L, 1654372739659896540L, 1729156697828698800L, 1806930732231868164L, 1887798936901417080L, 1971868496838460460L, 2059249764127216960L, 2150056335541175380L, 2244405131663260168L, 2342416477542041980L, 2444214184906252240L, 2549925635960074660L, 2659681868781901720L, 2773617664349460172L, 2891871635214426720L, 3014586315849873140L, 3141908254694099240L, 3273988107914632220L, 3410980734916392176L, 3553045295618245700L, 3700345349522392760L, 3853048956601256300L, 4011328780026769280L, 4175362190767180180L, 4345331374076725320L, 4521423437903744700L, 4703830523243047440L, 4892749916458563300L, 5088384163602548184L, 5290941186757843980L, 5500634402429926560L, 5717682842015710260L, 5942311274376312680L, 6174750330541220188L, 6415236630571532080L, 6664012912610199940L, 6921328164147418360L, 7187437755529563820L, 7462603575740320192L, 7747094170482872020L, 8041184882592290440L, 8345157994807481340L, 8659302874932311120L, 8983916123415772196L });
    // dim 11
    nzTable.add(new long[] { 1L, 22L, 242L, 1782L, 9922L, 44726L, 170610L, 568150L, 1690370L, 4573910L, 11414898L, 26572086L, 58227906L, 121023606L, 240089586L, 457018518L, 838478850L, 1488341910L, 2564399090L, 4300978550L, 7039035586L, 11265589302L, 17664712562L, 27182654422L, 41110086402L, 61184918102L, 89719625842L, 129757582262L, 185263467202L, 261353482742L, 364571790066L, 503220334870L, 687750033410L, 931222155030L, 1249849661170L, 1663629247478L, 2197075886786L, 2880072788406L, 3748850875506L, 4847113139286L, 6227320558338L, 7952157675990L, 10096197409650L, 12747786226230L, 16011172458690L, 20008902262646L, 24884509520882L, 30805527899542L, 37966855244802L, 46594502584982L, 56949762172402L, 69333831263862L, 84092930700482L, 101623959808822L, 122380731707762L, 146880835771606L, 175713176771330L, 209546243094870L, 249137159435890L, 295341582440630L, 349124501016258L, 411572006333686L, 483904100005106L, 567488612483606L, 663856307421186L, 774717251534358L, 901978533465330L, 1047763419193590L, 1214432035749570L, 1404603679311030L, 1621180848225906L, 1867375106104662L, 2146734884862722L, 2463175342471382L, 2821010395195762L, 3224987049262902L, 3680322162214082L, 4192741769654902L, 4768523118726642L, 5414539555384982L, 6138308418489346L, 6948042099779990L, 7852702435052530L, 8862058598232950L, 9986748676612290L, 11238345112221238L, 12629424201212786L, 14173639850178006L, 15885801795547906L, 17781958499635286L, 19879484944446578L, 22197175552146870L, 24755342468993730L, 27575919457669110L, 30682571651235570L, 34100811430425366L, 37858120694640642L, 41984079805902102L, 46510503494034162L, 51471584020618742L, 56904041908689602L, 62847284554776502L, 69343573049745522L, 76438197544920662L, 84179661510214402L, 92619875241443286L, 101814358984660850L, 111822456056206390L, 122707556348246210L, 134537330620876150L, 147383975993362418L, 161324473058824086L, 176440855058607106L, 192820489564768406L, 210556373131481586L, 229747439388794998L, 250498881065020610L, 272922486437110070L, 297136990721684850L, 323268442932932310L, 351450588747361026L, 381825269929428822L, 414542840886317682L, 449762602934633142L, 487653256876553922L, 528393374497952502L, 572171889616251122L, 619188609321272342L, 669654746068090882L, 723793471296896022L, 781840491271133426L, 844044645841713910L, 910668530861856450L, 981989144994175670L, 1058298561668932210L, 1139904626969939798L, 1227131684242467586L, 1320321326235592406L, 1419833175609845106L, 1526045694659660086L, 1639357025119079618L, 1760185858938386550L, 1888972340938842610L, 2026179004272496790L, 2172291739634101250L, 2327820799192532886L, 2493301836229769202L, 2669296981496409462L, 2856395957313968322L, 3055217230475701302L, 3266409205019551602L, 3490651455968937942L, 3728656005159535362L, 3981168640292937302L, 4248970278381129842L, 4532878374769059766L, 4833748378946239170L, 5152475238382302710L, 5489994951645721330L, 5847286172089480470L, 6225371863412453378L, 6625321008430443286L, 7048250372416433906L, 7495326322395478006L, 7967766703805870786L, 8466842775964800438L, 8993881207803544690L });

    // dim 12
    nzTable.add(new long[] { 1L, 24L, 288L, 2312L, 14016L, 68664L, 284000L, 1022760L, 3281280L, 9545560L, 25534368L, 63521352L, 148321344L, 327572856L, 688686048L, 1385794152L, 2681291520L, 5008112280L, 9060853280L, 15926230920L, 27266245056L, 45570869944L, 74501171808L, 119348538792L, 187641279616L, 289936284120L, 440840828064L, 660318036168L, 975339085632L, 1421956035576L, 2047881308384L, 2915673433320L, 4106643801600L, 5725615990040L, 7906687806240L, 10820166714888L, 14680871849152L, 19758020524344L, 26386944188256L, 34982908203048L, 46057341900672L, 60236820135000L, 78285175220640L, 101129158856520L, 129888117541440L, 165908192262776L, 210801604046304L, 266491641466728L, 335264024611072L, 419825382440856L, 523369647198240L, 649653240634504L, 803080002598848L, 988796893108152L, 1212801584624736L, 1482063152104104L, 1804657164647040L, 2189916584513240L, 2648599987044000L, 3193078728920520L, 3837544812377408L, 4598241319727352L, 5493717426066144L, 6545110138554856L, 7776455058459648L, 9215028617415192L, 10891724402414880L, 12841466355073800L, 15103661810016960L, 17722697525077560L, 20748482052614496L, 24237038006945064L, 28251147997912448L, 32861058225246552L, 38145243962913696L, 44191241407372360L, 51096550618849344L, 58969614550718328L, 67930879439099872L, 78113942113211496L, 89666790087085824L, 102753140605355160L, 117553885140187680L, 134268646173473160L, 153117453448318400L, 174342547237151928L, 198210316550585952L, 225013380601976744L, 255072822247702656L, 288740582542885848L, 326402025986967712L, 368478686483561160L, 415431204504701760L, 467762466431364600L, 526020957540269280L, 590804340621930216L, 662763272746996224L, 742605473247538968L, 831100056547475232L, 929082144062128136L, 1037457769991436480L, 1157209096454902584L, 1289399954059424608L, 1435181724654090792L, 1595799583709225856L, 1772599120460883544L, 1967033354686987680L, 2180670169727854920L, 2415200182132307520L, 2672445069101429880L, 2954366375715668448L, 3263074824767854952L, 3600840152885286144L, 3970101497508661656L, 4373478360204911648L, 4813782172725188232L, 5294028493179003840L, 5817449860681134520L, 6387509337839929440L, 7007914771494546600L, 7682633803174839936L, 8415909661851629784L, 9212277772667376288L });

    // dim 13
    nzTable.add(new long[] { 1L, 26L, 338L, 2938L, 19266L, 101946L, 454610L, 1761370L, 6065410L, 18892250L, 53972178L, 143027898L, 354870594L, 830764794L, 1847023698L, 3921503898L, 7988589570L, 15677993370L, 29746958930L, 54734043130L, 97926519106L, 170763634106L, 290835675858L, 484685386458L, 791675204866L, 1269252768602L, 2000029880786L, 3101188745018L, 4736845866818L, 7134140988026L, 10603978331986L, 15567533073690L, 22589850308610L, 32422110100250L, 46054413896530L, 64781268417658L, 90282306981698L, 124721199355194L, 170866164067794L, 232236016459098L, 313276266562818L, 419570428598490L, 558092423954130L, 737506758031290L, 968524034429250L, 1264320344233466L, 1641030140542546L, 2118323386055578L, 2720079052133378L, 3475168459185306L, 4418363488824402L, 5591386376657146L, 7044119619890498L, 8835996515597498L, 11037594993330386L, 13732459730059226L, 17019180046810370L, 21013753795970650L, 25852270367527890L, 31693949083492410L, 38724572624790338L, 47160358756895098L, 57252317502688594L, 69291145067309594L, 83612710264324098L, 100604193940198938L, 120710946960029010L, 144444137717517690L, 172389265882608450L, 205215625217702970L, 243686804795395026L, 288672324854954586L, 341160510859812098L, 402272717082971098L, 473279019271131346L, 555615504641417402L, 650903296667639106L, 760969461837206778L, 887869955827024978L, 1033914777379336346L, 1201695509579633666L, 1394115440272074650L, 1614422466017617490L, 1866244997331278330L, 2153631096953069890L, 2481091097638540218L, 2853643961426278098L, 3276867658578840794L, 3756953861428520194L, 4300767266219108698L, 4915909874748962258L, 5610790587219491130L, 6394700478207754050L, 7277894149143820410L, 8271677573115454290L });
    // dim 14
    nzTable.add(new long[] { 1L, 28L, 392L, 3668L, 25872L, 147084L, 703640L, 2919620L, 10746400L, 35704060L, 108568488L, 305568564L, 803467056L, 1989102444L, 4666890936L, 10435418532L, 22345512000L, 46012094940L, 91437047240L, 175918049300L, 328578611536L, 597268764748L, 1058868074712L, 1834389137028L, 3110749728352L, 5171677701820L, 8440960351208L, 13542178977012L, 21380213588848L, 33251200443692L, 50989319763704L, 77160831169380L, 115318214551680L, 170330174960540L, 248806698957320L, 359642381271508L, 514705956670864L, 729709463007756L, 1025296826430744L, 1428399006957636L, 1973911289979552L, 2706757985140860L, 3684420837693480L, 4980020019678900L, 6686050812139440L, 8918895190802156L, 11824245675578168L, 15583599202176292L, 20422001640365248L, 26617249151683932L, 34510781099693640L, 44520530965175188L, 57156036961722832L, 73036153097210828L, 92909744606138712L, 117679799329528324L, 148431439106397920L, 186464372949178940L, 233330397112677480L, 290876616563697780L, 361295138271980528L, 447180069653665964L, 551592745913249656L, 678136208483247844L, 831040063814881536L, 1015256968019404572L, 1236572108919632520L, 1501727193597179220L, 1818560597197305360L, 2196165488297616780L, 2645067918310714776L, 3177427047961064388L, 3807259883675831072L, 4550693111618614268L, 5426244847972716712L, 6455139371885265460L, 7661658173194321968L, 9073530931699167852L });
    // dim 15
    nzTable.add(new long[]{ 1L, 30L, 450L, 4510L, 34050L, 207006L, 1057730L, 4680990L, 18347010L, 64797470L, 209070018L, 623207070L, 1732242690L, 4524812190L, 11180805570L, 26283115038L, 59064045570L, 127421652510L, 264870794690L, 532225891230L, 1036722552066L, 1962569928350L, 3618706767810L, 6511963979550L, 11457102844930L, 19739530275102L, 33352168328130L, 55335307656350L, 90257700222210L, 144889114254750L, 229129634462146L, 357279785395230L, 549758831116290L, 835407220628510L, 1254544094546370L, 1862993174775198L, 2737341512717570L, 3981756932396190L, 5736763221834690L, 8190459055223070L, 11592769352160258L, 16273438627280670L, 22664617450115010L, 31329058307487390L, 42995129139305730L, 58600075142247326L, 79343216008627650L, 106751060886382110L, 142756661728923650L, 189795912520972830L, 250923942772350402L, 329955254837219230L, 431631822764117250L, 561824012823050910L, 727769910526400450L, 938359454462067486L, 1204470692897993730L, 1539366504953570590L, 1959161275015427010L, 2483368288691802270L, 3135540043527480578L, 3944015251453127070L, 4942788067020042690L, 6172517021416540190L, 7681693293714669570L });
    // dim 16
    nzTable.add(new long[] { 1L, 32L, 512L, 5472L, 44032L, 285088L, 1549824L, 7288544L, 30316544L, 113461024L, 387328512L, 1219605600L, 3575055360L, 9832110240L, 25537728000L, 63001648608L, 148348809216L, 334834507296L, 727126954496L, 1524223640416L, 3093172083712L, 6092464564128L, 11673741260288L, 21804412007648L, 39773478832128L, 70970111952160L, 124061810555392L, 212749286539872L, 358342294418432L, 593489108895392L, 967507857612288L, 1553917277469664L, 2460955893981184L, 3846121945725984L, 5936073260900864L, 9053610530222432L, 13653945217715200L, 20373043662828960L, 30091563817059840L, 44018786094117600L, 63802014501500928L, 91668222480941856L, 130606278558337536L, 184599954315939936L, 258924141762733056L, 360519346044286112L, 498462637195161088L, 684556914090170848L, 934064636705476608L, 1266617210955373088L, 1707337066248696320L, 2288216263858265952L, 3049803341459602432L, 4043259177046770592L, 5332853100396221952L, 6998982465384689888L, 9141812612744751104L });
    // dim 17
    nzTable.add(new long[] { 1L, 34L, 578L, 6562L, 56066L, 385186L, 2220098L, 11058466L, 48663554L, 192441122L, 693230658L, 2300164770L, 7094825730L, 20501991330L, 55871829570L, 144411206178L, 355761664002L, 838944980514L, 1900906442306L, 4152257037218L, 8769652761346L, 17955289409186L, 35721495233602L, 69199648501538L, 130777539341314L, 241521130125602L, 436553052633154L, 773364149728418L, 1344455730686722L, 2296287134000546L, 3857284100508226L, 6378709235590178L, 10393582407041026L, 16700660246748194L, 26482855453375042L, 41472539244498338L, 64180094992435970L, 98207083872980130L, 148671691352868930L, 222782041264046370L, 330602841859664898L, 486073078842107682L, 708347579881387074L, 1023553812755664546L, 1467077908834337538L, 2086521396641356706L, 2945503379880803906L, 4128522931166135842L, 5747144481961783298L, 7947826329622632994L });
    // dim 18
    nzTable.add(new long[] { 1L, 36L, 648L, 7788L, 70416L, 511668L, 3116952L, 16395516L, 76117536L, 317222212L, 1202893992L, 4196289420L, 13591279920L, 41188096980L, 117561917880L, 317844953628L, 818017823808L, 2012724468324L, 4752575891144L, 10805739370668L, 23727649169232L, 50452591339764L, 104129375982552L, 209050519717692L, 409027707560544L, 781326377027460L, 1459400559786216L, 2669317762147788L, 4787137642562928L, 8427880507250196L, 14581451741758968L, 24817445077857372L, 41589736720488576L, 68683979374277796L, 111867495074401032L, 179822889772274412L, 285475524009208720L, 447862702874624820L, 694741478100473880L, 1066195210717389180L, 1619580093841100448L, 2436256014542873028L, 3630676673266367784L, 5362578065903419404L, 7853209787493421488L });
    // dim 19
    nzTable.add(new long[] { 1L, 38L, 722L, 9158L, 87362L, 669446L, 4298066L, 23810534L, 116323586L, 509663334L, 2029779538L, 7428962950L, 25216532290L, 79995909190L, 238745924050L, 674152795558L, 1810015572994L, 4640757865126L, 11406058224594L, 26964373486406L, 61497762026306L, 135678002535302L, 290259969857618L, 603439865557862L, 1221518092836098L, 2411872177424102L, 4652599114237778L, 8781317436171782L, 16237772840882498L, 29452790990695622L, 52462123239704786L, 91861020059321126L, 158268201857667074L, 268541917952433446L, 449093392401112274L, 740783777247787718L, 1206082191029270850L, 1939420417913104390L, 3082024598888203090L, 4842961287706066150L, 7528736592264555778L });
    // dim 20
    nzTable.add(new long[] { 1L, 40L, 800L, 10680L, 107200L, 864008L, 5831520L, 33940120L, 174074240L, 800061160L, 3339504032L, 12798246520L, 45443741760L, 150656183240L, 469398016480L, 1382296736088L, 3866465104640L, 10317238542760L, 26364054632480L, 64734486343480L, 153196621856192L, 350372386417800L, 776310358810720L, 1670010194226200L, 3494968152620160L, 7128358422880360L, 14192829714542240L, 27626746264951800L, 52645836542006080L, 98336400373584200L, 180251314603984608L, 324574457903010520L, 574703679819998720L, 1001513799630099240L, 1719149109983644960L, 2909026279632544952L, 4855892247909603520L, 8001394856851978760L});
    // dim 21
    nzTable.add(new long[] { 1L, 42L, 882L, 12362L, 130242L, 1101450L, 7796978L, 47568618L, 255582978L, 1229718378L, 5369283570L, 21507034122L, 79749022402L, 275848947402L, 895903147122L, 2747597899690L, 7996359740418L, 22180063387818L, 58861356563058L, 149959897539018L, 367891005738690L, 871460014012682L, 1998142759241202L, 4444463312278122L, 9609441659124482L, 20232768234625002L, 41553956372047602L, 83373532351541642L, 163646115158499522L, 314628352074089802L, 593216067051658610L, 1098041839558653738L, 1997319977281662978L, 3573537456731760938L, 6294200366345505138L });
    // dim 22
    nzTable.add(new long[] { 1L, 44L, 968L, 14212L, 156816L, 1388508L, 10286936L, 65652532L, 368804128L, 1854105484L, 8453107432L, 35329425124L, 136585481648L, 492183451452L, 1663935545976L, 5307436592788L, 16051394232896L, 46227817361132L, 127269237312008L, 336090491414084L, 853941394691792L, 2093292414443164L, 4962895187697048L, 11405501259216372L, 25459406230618976L, 55301616124368460L, 117088340731041064L, 242015829454630308L, 489035476964671472L, 967309944197260796L, 1875154363323009208L, 3566412269933321556L, 6661774086773638272L });
    // dim 23
    nzTable.add(new long[] { 1L, 46L, 1058L, 16238L, 187266L, 1732590L, 13408034L, 89347502L, 523804162L, 2746713774L, 13053926690L, 56836459246L, 228751366018L, 857520299118L, 3013639296546L, 9985011435310L, 31343842260994L, 93623053855022L, 267120108528162L, 730479837254254L, 1920511723360130L, 4867745532495086L, 11923933134635298L, 28292329581548718L, 65157237071384066L, 145918259426371502L, 318308216281781026L, 677412386467452398L, 1408463692886754178L, 2864809114048686446L, 5707273421568956450L });
    // dim 24
    nzTable.add(new long[] { 1L, 48L, 1152L, 18448L, 221952L, 2141808L, 17282432L, 120037968L, 733189632L, 4003707568L, 19804348032L, 89694733968L, 375282559232L, 1461554224368L, 5332713820032L, 18331364551888L, 59660218248192L, 184627114364208L, 545370276747392L, 1542970222529808L, 4193961783144192L, 10982219038999408L, 27773897706129792L, 67990160422313808L, 161439727075246592L, 372515223573002160L, 836741699281154688L, 1832462302030388112L, 3918338381384594688L, 8191611188320035312L });
    // dim 25
    nzTable.add(new long[] { 1L, 50L, 1250L, 20850L, 261250L, 2625010L, 22049250L, 159369650L, 1012597250L, 5749494450L, 29557550050L, 139056632050L, 604033925250L, 2440870708850L, 9235138753250L, 32899217125170L, 110890799925250L, 355178132537650L, 1085175523649250L, 3173516022926450L, 8910448028600450L, 24086628850744050L, 62842745595873250L, 158606803724316850L, 388036691221877250L, 921991641870126002L, 2131248564724282850L, 4800452566035825650L });
    // dim 26
    nzTable.add(new long[] { 1L, 52L, 1352L, 23452L, 305552L, 3191812L, 27866072L, 209284972L, 1381251872L, 8143343572L, 43450388072L, 212064570172L, 955155127472L, 4000059761572L, 15676069223672L, 57810425102092L, 201600442152512L, 667669374615412L, 2108023030802312L, 6366714577378012L, 18450678628904912L, 51447755508249412L, 138377129954866712L, 359826679275056812L, 906470174221250912L, 2216498507313254164L, 5269738713907663016L });
    // dim 27
    nzTable.add(new long[] { 1L, 54L, 1458L, 26262L, 355266L, 3852630L, 34910514L, 272061558L, 1862598402L, 11387193846L, 62980925490L, 318495883734L, 1485715581378L, 6440930470422L, 26117059455666L, 99603553781430L, 359014421036034L, 1228284237803958L, 4003976643221682L, 12478714251402006L, 37296107457684930L, 107194541594839254L, 297019427057955378L, 795223236287878902L, 2061520089784186626L, 5184488771318691702L });
    // dim 28
    nzTable.add(new long[] { 1L, 56L, 1568L, 29288L, 410816L, 4618712L, 43381856L, 350353928L, 2485013888L, 15734806136L, 90102925472L, 471579734696L, 2275791199808L, 10202437251608L, 42760427177696L, 168481040414792L, 627099015232256L, 2214397674072248L, 7446658555097888L, 23929349449721576L, 73704171158808512L, 218194820211332696L, 622408788864127328L, 1714651452209961608L, 4571394778282027136L });
    // dim 29
    nzTable.add(new long[] { 1L, 58L, 1682L, 32538L, 472642L, 5502170L, 53502738L, 447238522L, 3282606338L, 21502426362L, 127340157970L, 689022818138L, 3436393752642L, 15914622204058L, 68877486633362L, 280118954225850L, 1075699009872898L, 3917195699177402L, 13578251928347538L, 44954259933167002L, 142587780541697090L, 434486771911838298L, 1275090380987298322L, 3612150622061387258L });
    // dim 30
    nzTable.add(new long[] { 1L, 60L, 1800L, 36020L, 541200L, 6516012L, 65520920L, 566262180L, 4296107040L, 29081139740L, 177923724072L, 994286700180L, 5119703270960L, 24470719227660L, 109262828065080L, 458259268924292L, 1814077233023040L, 6806971942073340L, 24302419569598280L, 82834931431112820L, 270376971905976912L, 847451524359512300L, 2557028677258648920L, 7444269680307334500L });
    // dim 31
    nzTable.add(new long[] { 1L, 62L, 1922L, 39742L, 616962L, 7674174L, 79711106L, 711494206L, 5573863426L, 38951110206L, 245955974018L, 1418166398270L, 7532156369410L, 37122578868030L, 170856126160770L, 738378223150142L, 3010714725097474L, 11631763900193854L, 42741155411865474L, 149878506412576574L, 503090409749666306L, 1620918906015155518L, 5025399107633316738L });
    // dim 32
    nzTable.add(new long[] { 1L, 64L, 2048L, 43712L, 700416L, 8991552L, 96376832L, 887582144L, 7172939776L, 51697913408L, 336604997632L, 2000727369920L, 10951050137600L, 55605785375040L, 263584490403840L, 1172818839714752L, 4921911787962368L, 19564390413253696L, 73937309725313024L, 266556971549755072L, 919525887711997952L, 3043535203476819776L });
    // dim 33
    nzTable.add(new long[] { 1L, 66L, 2178L, 47938L, 792066L, 10484034L, 115852418L, 1099811394L, 9160333314L, 68031186498L, 456334097538L, 2793666465090L, 15745443972610L, 82302279485250L, 401492555264130L, 1837895885382722L, 7932626513059842L, 32418928714275906L, 125920628852842626L, 466414910127910722L, 1652497769389663746L, 5615558860578481474L });
    // dim 34
    nzTable.add(new long[] { 1L, 68L, 2312L, 52428L, 892432L, 12168532L, 138504984L, 1354168796L, 11614313504L, 88805833316L, 613171117352L, 3863171679980L, 22402282117680L, 120450005575540L, 604244840324920L, 2843633280971772L, 12614155679414336L, 52965710906750084L, 211305268473868616L, 803640807454621964L, 2922553486972196432L });
    // dim 35
    nzTable.add(new long[] { 1L, 70L, 2450L, 57190L, 1002050L, 14063014L, 164736530L, 1657410310L, 14625892610L, 115046039430L, 817022990098L, 5293365787430L, 31558819585090L, 174411107278310L, 899105953178770L, 4346984074475462L, 19804773034861570L, 85384639621025990L, 349655619001644690L, 1364601694930135270L, 5090795989356953666L });
    // dim 36
    nzTable.add(new long[] { 1L, 72L, 2592L, 62232L, 1121472L, 16186536L, 194986080L, 2017132920L, 18300435840L, 147972367880L, 1080041397408L, 7190430174936L, 44042615547456L, 250012542410856L, 1323529602867936L, 6569619630522168L, 30721376739859200L, 135910789395746760L, 570951048018417440L, 2285208361950197400L, 8740606046237286336L });
    // dim 37
    nzTable.add(new long[]{ 1L, 74L, 2738L, 67562L, 1251266L, 18559274L, 229731890L, 2441850890L, 22759419650L, 189032223370L, 1417045988658L, 9687517561002L, 60920563283394L, 354975721241706L, 1928517866520498L, 9821667099910602L, 47112663470291970L, 213744829605897930L, 920606667020062130L, 3776766076988676970L});

    }

    /** Default Constructor */
    public Labelling() {}

    /**
      * This constructor initializes a <code>DataOutputStream</code> in order
      * to output results
      * @param filename the path to the output file
      * @see hyper.dsp.LabellingJAI#imageLabelling for an example on output results
      */
    public Labelling(String filename) throws FileNotFoundException {
		this.dout = new BitOutputStream(new FileOutputStream(filename));
    }


    /**
     * Finds the index associated with this vector
     */
    public static long index(short[] x) {
		int i=0,l=x.length,k=distanceL1(x);
		if (l>63) return indexBig(x); // problemas de ops internas que se salen de rango...
		long b=0;
		//System.out.println("k: "+k+" d: "+l);
		do {
		    int ax=Math.abs(x[i]);
	 	   if (ax==1) {
				b+=cardinalNZ(l-1,k)+cardinalNZ(l-1,k-1)*sgnP(x[i]);
	   	 } else if (ax>1) {
				b+=cardinalNZ(l-1,k)+cardinalNZ(l-1,k-ax)*sgnP(x[i]);
				long sum=0;
				for (int j=ax-1;j>0;j--) sum+=cardinalNZ(l-1,k-j);
				b+=2*sum;
	   	 }
	    	k-=ax;
		    l--;
		    i++;
		} while(k>0);
		return b;
    }

    /**
     * Finds the index associated with this vector using BigIntegers
     */
    public static long indexBig(short[] x) {
		int i=0,l=x.length,k=distanceL1(x);
		BigInteger b=new BigInteger("0");
		//System.out.println("k: "+k+" d: "+l);
		do {
		    int ax=Math.abs(x[i]);
	 	   if (ax==1) {
				b=b.add(cardinalNZBig(l-1,k).add(cardinalNZBig(l-1,k-1).multiply(new BigInteger(""+sgnP(x[i])))));
	   	 } else if (ax>1) {
				b=b.add(cardinalNZBig(l-1,k).add(cardinalNZBig(l-1,k-ax).multiply(new BigInteger(""+sgnP(x[i])))));
				BigInteger sum=new BigInteger("0");
				for (int j=ax-1;j>0;j--) sum=sum.add(cardinalNZBig(l-1,k-j));
				b=b.add(sum.shiftLeft(1));
	   	 }
	    	k-=ax;
		    l--;
		    i++;
		} while(k>0);
		return b.longValue();
    }


    public static void multiply(double s,short[] v) {
	for (int i=0;i<v.length;i++)
	    v[i] = (short)(s*v[i]);
    }

/*
    public static long indexAlterInt(short[] x) {
	int maxNorm = maxDistanceInt(x.length);
	while (distanceL1(x) > maxNorm) multiply(0.8,x);
	return index(x);
    }
*/
    public static long indexAlterLong(short[] x) {
	int maxNorm = maxDistance(x.length);
	while (distanceL1(x) > maxNorm) multiply(0.8,x);
	return index(x);
    }

    /** Finds the vector associated with index b and distance m
	  * on lattice Z(d). <p>
	  * It could happen that a bad coded vector couldn't be
	  * decoded, entering an endless loop. Must be mended soon!
	  */
    public static short[] vector(int m, long b, int d) {
    	if (d>63) return vectorBig(m,b,d);
		short[] x=new short[d];      
		int dim=d, norm=m, a_norm=m;
		long nn=0, index=b;
		if (norm == 0) return x;

		for (int a_dim=0;a_dim<dim;a_dim++) {
		    nn = cardinalNZ(dim-a_dim-1,a_norm);
		    if (index<nn)
				x[a_dim]=0;
		    else {
				index-=nn;
				int h_norm=1;
				long sum=0;		
				while ((sum+(nn=2*cardinalNZ(dim-a_dim-1,a_norm-h_norm)))
			       <= index) {
				    sum += nn;
				    h_norm=h_norm+1;
				    if (nn == 0 && h_norm >= MAX_NORM) {  // to avoid endless loop ...
				    	System.out.println("Labelling: vector(m = "+m+", b = "+b+", d = "+d+")");
			    		break;
			    	}
				}
				index -=sum;
				if ((nn=cardinalNZ(dim-a_dim-1,a_norm-h_norm))<=index) {
			 	   index -= nn;
			 	   x[a_dim]=(short)-h_norm;
				} else x[a_dim]=(short)h_norm;
				a_norm-=h_norm;
	   	 }		    
		}

		return x;

    } // end vector

    /** Finds the vector associated with index b and distance m
	  * on lattice Z(d). <p>
	  * It uses BigIntegers.
	  */
    public static short[] vectorBig(int m, long b, int d) {
		short[] x=new short[d];      
		int dim=d, norm=m, a_norm=m;
		BigInteger nn=new BigInteger("0"), index=new BigInteger(""+b);
		if (norm == 0) return x;

		for (int a_dim=0;a_dim<dim;a_dim++) {
		    nn = cardinalNZBig(dim-a_dim-1,a_norm);
		    if (index.compareTo(nn)<0)
				x[a_dim]=0;
		    else {
				index = index.subtract(nn);
				int h_norm=1;
				BigInteger sum=new BigInteger("0");
				while ((sum.add(nn=cardinalNZBig(dim-a_dim-1,a_norm-h_norm).shiftLeft(1))).compareTo(index)<=0)
			    {
				    sum = sum.add(nn);
				    h_norm=h_norm+1;
				}
				index = index.subtract(sum);
				if ((nn=cardinalNZBig(dim-a_dim-1,a_norm-h_norm)).compareTo(index)<=0) {
			 	   index = index.subtract(nn);
			 	   x[a_dim]=(short)-h_norm;
				} else x[a_dim]=(short)h_norm;
				a_norm-=h_norm;
	   	 }		    
		}

		return x;

    } // end vector


    public static short[] vectorKK(int m, int b, int d) {
	short[] x=new short[d];      
	int i=0, xb=0, k=m, l=d, j=0, nn=0;

	do {
	    if (b==xb) {
		x[i]=0;
		if (k>0) x[d-1]=(short)(k-Math.abs(x[i]));
		return x;
	    }
	    nn = (int)cardinalNZ(l-1,k);
	    if (b<xb+nn) x[i]=0;
	    else {
		xb+=nn; j=1;
		boolean less;
		do {
		    nn = (int)cardinalNZ(l-1,k-j);
		    less = b<=xb+2*nn;
		    if (less) {
			if (xb<=b && b<xb+nn) x[i]=(short)j;
			if (b>=xb+nn) x[i]=(short)-j;
		    } else {
			xb+=2*nn;
			j++;
		    }
		} while (!less);
	    }
	    k-=Math.abs(x[i]);
	    l--;
	    i++;
	} while (k>0);

	return x;

    } // end vector

    public static int distanceL1(short[] v) {
		int m=0;
		for (int i=0;i<v.length;i++) m+=Math.abs(v[i]);
		return m;
    }

    public static long cardinalNZ(int d, int m) {
	if (m==0) return 1;
	if (d<38) {
	    long[] t = (long[])nzTable.get(d);
	    //System.out.println("c: "+t.length+" m: "+m);
	    if (m<t.length && m>=0) return t[m];	    
	}
	long sum=0;
	for (int i=Math.min(d,m);i>0;i--) {
	    sum+=(1<<i)*combi(d,i)*combi(m-1,i-1);
	}
	return sum;
    }

    public static BigInteger cardinalNZBig(int d, int m) {
	if (m==0) return BigInteger.ONE;
	BigInteger sum=new BigInteger("0");
	BigInteger dos=new BigInteger("2");
	for (int i=1;i<=Math.min(d,m);i++) {
	    sum=sum.add(
		dos.multiply(combination(d,i).multiply(combination(m-1,i-1))));
	    dos=dos.shiftLeft(1);
	}
	return sum;
    }

    public static int maxDistanceInt(int dim) {
		int max=1;
        long n=0;
		long top = Integer.MAX_VALUE;
	
		for (;n<top;max++)	  
	 	   n=cardinalNZ(dim,max);

		return (max-1);
    }

    /** Maximum distance we can tolerate using long datatype */
    public static int maxDistanceLong(int dim) {
		int max=maxDistanceInt(dim);
        BigInteger n=BigInteger.ZERO;
		BigInteger top = BigInteger.valueOf(Long.MAX_VALUE);
	
		for (;n.compareTo(top)<0;max++)
	 	   n=cardinalNZBig(dim,max);
		
		return (max-1);
    }

    /** Allowing 1 byte-long norm and using static data in this class */
    public static int maxDistance(int dim) {
		if (dim<10) return MAX_NORM;
		if (dim<38) return ((long[])nzTable.get(dim)).length;
		return maxDistanceLong(dim);
    }
    
    /** Maximum number of bits required to code an index
      * given a vector of dimension <code>dim</code> and norm <code>m</code>.
      */
    public static int maxBits(int dim, int m) {
    	long maxIndex = cardinalNZ(dim, maxDistance(dim));
    	return BitOutputStream.minBits(maxIndex);
    }

    /**
     *          / n \
     * Computes |   |
     *          \ r /
     */
    public static long combi(int n, int r) {
	long num=1, den=1;
	if (r>n/2) r=n-r;	
	
	int i,j;
	for (i=n,j=r;i>n-r;i--) {
	    num*=i;
	    if (num % j == 0) num=num/j--;
	}
	for (;j>1;j--) num=num/j;

	return num;
    }

    public static BigInteger combination(int n, int r) {	
	if (r>n/2) r=n-r;
	BigInteger num = new BigInteger("1");
	BigInteger den = new BigInteger("1");

	for (int i=n;i>n-r;i--)
	    num=num.multiply(java.math.BigInteger.valueOf(i));
	for (int i=r;i>1;i--)
	    den=den.multiply(java.math.BigInteger.valueOf(i));

	num=num.divide(den);

	return num;
    }


    public static int sgn(int n) {
	return (n==0)?0:(n>1)?1:-1;
    }

    public static int sgnP(int n) {
	return (n>0)?0:1;
    }

/*
    public static void main(String args[]) {
	int n=Integer.parseInt(args[0]);
 	int r=Integer.parseInt(args[1]);
	int d=Integer.parseInt(args[2]);
//	System.out.println("Nz("+n+","+r+")="+cardinalNZ(n,r));
//	System.out.println("Nz("+n+","+r+")="+cardinalNZBig(n,r));
//	System.out.println("C("+n+","+r+")="+combi(n,r));
//	System.out.println("C("+n+","+r+")="+combination(n,r));
// 	System.out.println("index(("+n+","+r+"))="
//	 		   +index(new short[] {(short)n,(short)r}));
	System.out.println(verV(vector(n,r,d)));

//	System.out.println("normaMax("+n+",INT)= "+maxDistanceInt(n));
//	System.out.println("normaMax("+n+",LONG)= "+maxDistanceLong(n));

//	byte c = (byte)(n+r);      
//	System.out.println("a+b = "+c);

//	runAtest(n,(short)r,new short[n]);
			    
    }
*/


    public static String verV(short[] v){
	String s="(";
	for (int i=0;i<v.length;i++) {
	    s += v[i];
	    if (i<v.length-1) s+=", ";
	}
	s += ")";
    
	return s;
    }

    /** Recursive function to test index and vector functions */
    public static void runAtest(int dim,short max,short[] v) {
	if (dim<=0) return;
	if (dim==1) {
	    for (short i=(short)-max;i<max;i++) {	  
		v[0]=i;
		short[] vv = new short[v.length];
		for (int j=0;j<v.length;j++) vv[j]=v[j];
		long b=indexAlterLong(vv);
		int m=distanceL1(vv);
		short[] vd = vector(m,b,v.length);
		System.out.println("v: "+verV(v)+"\n vv:"+verV(vv)+
				   " b: "+b+" m: "+m+" r: "+
				   verV(vd));
	    }
	} else {
	    for (short i=(short)-max;i<max;i++) {
		v[dim-1]=i;
		runAtest(dim-1,max,v);
	    }
	}
    }
}
